
from GeekyGadgets.Semantics.Rulesets.Globals import *

from GeekyGadgets.Iterators import Walker
from GeekyGadgets.Classy import ClassProperty, CachedClassProperty

UNITS : "tuple[Unit]"

class CSS:
	def __str__(cls):
		return KebabCase(cls.__name__ if isinstance(cls, type) else cls.__class__.__name__)
	def __hash__(cls):
		return hash(str(cls))
	def __eq__(cls, other):
		return hash(cls) == hash(other) if isinstance(other, Hashable) else NotImplemented

class CascadingStyleSheet(Ruleset, CSS):
	def __init__(self, selector : str, properties : "dict[str|type[CssProperty],str|Scalar|Function]") -> None:
		self.update(properties)
		return super().__init__(properties)

#
#	UNITS
#

class Unit(CSS):

	def __new__(cls, *args):
		
		if cls is not Unit:
			return super().__new__(cls)
		elif len(args) != 1:
			pass
		elif isinstance(args[0], Unit):
			return args[0]
		elif isinstance(args[0], Number):
			return Scalar(args[0])
		elif isinstance(args[0], str):
			for unitClass in UNITS:
				if issubclass(unitClass, Scalar) and args[0].endswith(unitClass.suffix):
					return unitClass(float(args[0][:-len(unitClass.suffix)]))
				elif issubclass(unitClass, Function) and args[0].startswith(unitClass.name):
					return unitClass(map(lambda x:Unit(x.strip()), args[0][len(unitClass.name):].strip("()").split(",")))
		
		raise ValueError(f"Failed to arbitrate `Unit` type for {args=}")
	
		
class Scalar(Unit, float):
	suffix = ClassProperty(lambda self: KebabCase(self.__name__) if isinstance(self, type) else KebabCase(self.__class__.__name__))
	def __init__(self, value : Number) -> None:
		self.value = value
	def __str__(self):
		numStr = float.__format__(".3f")
		if numStr.endswith(".000"):
			return format(self)
		else:
			return numStr+self.suffix
	def __format__(self, fs=".0f"):
		return super().__format__(fs)+self.suffix

class Function(Unit, tuple):
	name = CachedClassProperty(lambda self: KebabCase(self.__name__) if isinstance(self, type) else KebabCase(self.__class__.__name__))
	def __str__(self):
		return f"{KebabCase(self.__class__.__name__)}({', '.join(map(lambda x:str(x) if not isinstance(x, str) else SyntaxContext.repString(x), self))})"
	
class Color(Function):
	
	origin : "Color"

	def __init__(self : "Color", *values : "Number|Unit") -> None:
		if len(values) == 1 and isinstance(values[0], Color):
			super().__init__(*values[0])
			self.origin = values[0].origin
		else:
			self.value = values
			self.origin = self

class RGB(Color): ...
class RGBA(Color): ...
class HSL(Color): ...
class HSV(Color): ...
class HWB(Color):
	def __init__(self, hue : "Angle", whiteness : "Percentage", blackness : "Percentage"):
		self.values = (Angle(hue), Percentage(whiteness), Percentage(blackness))
class LAB(Color):
	def __init__(self, L : "Percentage", A : "Scalar", B : "Scalar"):
		self.values = (Angle(L), Percentage(A), Percentage(B))
class LCH(Color):
	def __init__(self, L : "Percentage", C : "Scalar", H : "Scalar"):
		self.values = (Angle(L), Percentage(C), Percentage(H))
class DisplayP3(Color):
	def __str__(self):
		return f"color(display-p3 {' '.join(map(str, self))})"
class HexColor(RGBA):
	def __str__(self) -> str:
		return f"#{format(sum(v<<(8*i) for i, v in enumerate(reversed(self.value))), f'0>{2*len(self.value)}x')}"

class Dimension(Scalar): ...
class Percentage(Scalar):
	suffix = "%"

class Absolute: ...
class Relative: ...

class Length(Dimension, ABC): ...	
class Angle(Dimension):
	suffix = "deg"
class Time(Dimension, ABC): ...
class Resolution(Dimension, ABC): ...

class Cm(Length, Absolute): ...
class Mm(Length, Absolute): ...
class Q(Length, Absolute): ...
class In(Length, Absolute): ...
class Pc(Length, Absolute): ...
class Pt(Length, Absolute): ...
class Px(Length, Absolute): ...

class Em(Length, Relative): ...
class Rem(Length, Relative): ...
class Vh(Length, Relative): ...
class Vw(Length, Relative): ...
class Lh(Length, Relative): ...
class Rlh(Length, Relative): ...

class Sec(Time):
	suffix = "s"
class MilliSec(Time):
	suffix = "ms"

class Dpi(Resolution): ...
class Dpcm(Resolution): ...
class Dppx(Resolution): ...

#
#	// UNITS
#

class CssRuleMeta(CSS, type):
	def __rmatmul__(cls : "type[CssRule]", sheet : CascadingStyleSheet) -> "CssRule":
		return cls(sheet)
	def __str__(cls):
		return f"@{super().__str__()}"

class CssRule(metaclass=CssRuleMeta):
	
	value : Ruleset|str

	def __str__(self):
		return f"@{self.__class__.__name__} {SyntaxContext.repString(self.value) if isinstance(self.value, str) else self.value}{';' if isinstance(self.value, Ruleset) else ''}"
	
class Charset(CssRule): ...
class FontFace(CssRule): ...
class FontFeatureValues(CssRule): ...
class Import(CssRule): ...
class Keyframes(CssRule): ...
# class Media(CssRule):

# 	@overload
# 	def Type(self, value : Literal["all","print","screen"], /): ...
# 	@overload
# 	def Type(self, qualifier : Literal["not","only"], value : Literal["all","print","screen"], /): ...
# 	@classmethod
# 	def Type(self, *args):
# 		if len(args) == 1 and args[0] in ["all","print","screen"]:
# 			self.Type = args[0]
# 		elif len(args) == 2 and args[0] in ["not","only"] and args[1] in ["all","print","screen"]:
# 			self.Type = " ".join(args)
# 		else:
# 			raise ValueError(f"`Media.Type()` only accepts 1 or 2 arguments, not {len(args)}.")
# 		return self
		
# 	@overload
# 	def Feature(self, *, Orientation : Literal["landscape","portrait"], MaxHeight : Px, MinHeight : Px, Height : Px, MaxWidth : Px, MinWidth : Px, Width : Px): ...
# 	def Feature(self, **kwargs):
# 		self.features.extend(f"{}{SyntaxContext.}: {}")
# 		return self
	
# 	# media not|only mediatype and (mediafeature and|or|not mediafeature)

class var(Function): ...

class CssPropertyMeta(CSS, type):
	def __str__(cls):
		return KebabCase(cls.__name__)
	def __hash__(cls):
		return hash(str(cls))
	def __eq__(cls, other):
		return hash(cls) == hash(other) if isinstance(other, Hashable) else NotImplemented

class CssProperty(metaclass=CssPropertyMeta): ...

class AccentColor(CssProperty): ...
class AlignContent(CssProperty): ...
class AlignItems(CssProperty): ...
class AlignSelf(CssProperty): ...
class All(CssProperty): ...
class Animation(CssProperty): ...
class AnimationDelay(CssProperty): ...
class AnimationDirection(CssProperty): ...
class AnimationDuration(CssProperty): ...
class AnimationFillMode(CssProperty): ...
class AnimationIterationCount(CssProperty): ...
class AnimationName(CssProperty): ...
class AnimationPlayState(CssProperty): ...
class AnimationTimingFunction(CssProperty): ...
class AspectRatio(CssProperty): ...
class BackdropFilter(CssProperty): ...
class BackfaceVisibility(CssProperty): ...
class Background(CssProperty): ...
class BackgroundAttachment(CssProperty): ...
class BackgroundBlendMode(CssProperty): ...
class BackgroundClip(CssProperty): ...
class BackgroundColor(CssProperty): ...
class BackgroundImage(CssProperty): ...
class BackgroundOrigin(CssProperty): ...
class BackgroundPosition(CssProperty): ...
class BackgroundPositionX(CssProperty): ...
class BackgroundPositionY(CssProperty): ...
class BackgroundRepeat(CssProperty): ...
class BackgroundSize(CssProperty): ...
class BlockSize(CssProperty): ...
class Border(CssProperty): ...
class BorderBlock(CssProperty): ...
class BorderBlockColor(CssProperty): ...
class BorderBlockEnd(CssProperty): ...
class BorderBlockEndColor(CssProperty): ...
class BorderBlockEndStyle(CssProperty): ...
class BorderBlockEndWidth(CssProperty): ...
class BorderBlockStart(CssProperty): ...
class BorderBlockStartColor(CssProperty): ...
class BorderBlockStartStyle(CssProperty): ...
class BorderBlockStartWidth(CssProperty): ...
class BorderBlockStyle(CssProperty): ...
class BorderBlockWidth(CssProperty): ...
class BorderBottom(CssProperty): ...
class BorderBottomColor(CssProperty): ...
class BorderBottomLeftRadius(CssProperty): ...
class BorderBottomRightRadius(CssProperty): ...
class BorderBottomStyle(CssProperty): ...
class BorderBottomWidth(CssProperty): ...
class BorderCollapse(CssProperty): ...
class BorderColor(CssProperty): ...
class BorderEndEndRadius(CssProperty): ...
class BorderEndStartRadius(CssProperty): ...
class BorderImage(CssProperty): ...
class BorderImageOutset(CssProperty): ...
class BorderImageRepeat(CssProperty): ...
class BorderImageSlice(CssProperty): ...
class BorderImageSource(CssProperty): ...
class BorderImageWidth(CssProperty): ...
class BorderInline(CssProperty): ...
class BorderInlineColor(CssProperty): ...
class BorderInlineEnd(CssProperty): ...
class BorderInlineEndColor(CssProperty): ...
class BorderInlineEndStyle(CssProperty): ...
class BorderInlineEndWidth(CssProperty): ...
class BorderInlineStart(CssProperty): ...
class BorderInlineStartColor(CssProperty): ...
class BorderInlineStartStyle(CssProperty): ...
class BorderInlineStartWidth(CssProperty): ...
class BorderInlineStyle(CssProperty): ...
class BorderInlineWidth(CssProperty): ...
class BorderLeft(CssProperty): ...
class BorderLeftColor(CssProperty): ...
class BorderLeftStyle(CssProperty): ...
class BorderLeftWidth(CssProperty): ...
class BorderRadius(CssProperty): ...
class BorderRight(CssProperty): ...
class BorderRightColor(CssProperty): ...
class BorderRightStyle(CssProperty): ...
class BorderRightWidth(CssProperty): ...
class BorderSpacing(CssProperty): ...
class BorderStartEndRadius(CssProperty): ...
class BorderStartStartRadius(CssProperty): ...
class BorderStyle(CssProperty): ...
class BorderTop(CssProperty): ...
class BorderTopColor(CssProperty): ...
class BorderTopLeftRadius(CssProperty): ...
class BorderTopRightRadius(CssProperty): ...
class BorderTopStyle(CssProperty): ...
class BorderTopWidth(CssProperty): ...
class BorderWidth(CssProperty): ...
class Bottom(CssProperty): ...
class BoxDecorationBreak(CssProperty): ...
class BoxReflect(CssProperty): ...
class BoxShadow(CssProperty): ...
class BoxSizing(CssProperty): ...
class BreakAfter(CssProperty): ...
class BreakBefore(CssProperty): ...
class BreakInside(CssProperty): ...
class CaptionSide(CssProperty): ...
class CaretColor(CssProperty): ...
class Clear(CssProperty): ...
class Clip(CssProperty): ...
class ClipPath(CssProperty): ...
class Color(CssProperty): ...
class ColumnCount(CssProperty): ...
class ColumnFill(CssProperty): ...
class ColumnGap(CssProperty): ...
class ColumnRule(CssProperty): ...
class ColumnRuleColor(CssProperty): ...
class ColumnRuleStyle(CssProperty): ...
class ColumnRuleWidth(CssProperty): ...
class ColumnSpan(CssProperty): ...
class ColumnWidth(CssProperty): ...
class Columns(CssProperty): ...
class Content(CssProperty): ...
class CounterIncrement(CssProperty): ...
class CounterReset(CssProperty): ...
class CounterSet(CssProperty): ...
class Cursor(CssProperty): ...
class Direction(CssProperty): ...
class Display(CssProperty): ...
class EmptyCells(CssProperty): ...
class Filter(CssProperty): ...
class Flex(CssProperty): ...
class FlexBasis(CssProperty): ...
class FlexDirection(CssProperty): ...
class FlexFlow(CssProperty): ...
class FlexGrow(CssProperty): ...
class FlexShrink(CssProperty): ...
class FlexWrap(CssProperty): ...
class Float(CssProperty): ...
class Font(CssProperty): ...
class FontFamily(CssProperty): ...
class FontFeatureSettings(CssProperty): ...
class FontKerning(CssProperty): ...
class FontLanguageOverride(CssProperty): ...
class FontSize(CssProperty): ...
class FontSizeAdjust(CssProperty): ...
class FontStretch(CssProperty): ...
class FontStyle(CssProperty): ...
class FontSynthesis(CssProperty): ...
class FontVariant(CssProperty): ...
class FontVariantAlternates(CssProperty): ...
class FontVariantCaps(CssProperty): ...
class FontVariantEastAsian(CssProperty): ...
class FontVariantLigatures(CssProperty): ...
class FontVariantNumeric(CssProperty): ...
class FontVariantPosition(CssProperty): ...
class FontWeight(CssProperty): ...
class Gap(CssProperty): ...
class Grid(CssProperty): ...
class GridArea(CssProperty): ...
class GridAutoColumns(CssProperty): ...
class GridAutoFlow(CssProperty): ...
class GridAutoRows(CssProperty): ...
class GridColumn(CssProperty): ...
class GridColumnEnd(CssProperty): ...
class GridColumnGap(CssProperty): ...
class GridColumnStart(CssProperty): ...
class GridGap(CssProperty): ...
class GridRow(CssProperty): ...
class GridRowEnd(CssProperty): ...
class GridRowGap(CssProperty): ...
class GridRowStart(CssProperty): ...
class GridTemplate(CssProperty): ...
class GridTemplateAreas(CssProperty): ...
class GridTemplateColumns(CssProperty): ...
class GridTemplateRows(CssProperty): ...
class HangingPunctuation(CssProperty): ...
class Height(CssProperty): ...
class Hyphens(CssProperty): ...
class HypenateCharacter(CssProperty): ...
class ImageRendering(CssProperty): ...
class InlineSize(CssProperty): ...
class Inset(CssProperty): ...
class InsetBlock(CssProperty): ...
class InsetBlockEnd(CssProperty): ...
class InsetBlockStart(CssProperty): ...
class InsetInline(CssProperty): ...
class InsetInlineEnd(CssProperty): ...
class InsetInlineStart(CssProperty): ...
class Isolation(CssProperty): ...
class JustifyContent(CssProperty): ...
class JustifyItems(CssProperty): ...
class JustifySelf(CssProperty): ...
class Left(CssProperty): ...
class LetterSpacing(CssProperty): ...
class LineBreak(CssProperty): ...
class LineHeight(CssProperty): ...
class ListStyle(CssProperty): ...
class ListStyleImage(CssProperty): ...
class ListStylePosition(CssProperty): ...
class ListStyleType(CssProperty): ...
class Margin(CssProperty): ...
class MarginBlock(CssProperty): ...
class MarginBlockEnd(CssProperty): ...
class MarginBlockStart(CssProperty): ...
class MarginBottom(CssProperty): ...
class MarginInline(CssProperty): ...
class MarginInlineEnd(CssProperty): ...
class MarginInlineStart(CssProperty): ...
class MarginLeft(CssProperty): ...
class MarginRight(CssProperty): ...
class MarginTop(CssProperty): ...
class Mask(CssProperty): ...
class MaskClip(CssProperty): ...
class MaskComposite(CssProperty): ...
class MaskImage(CssProperty): ...
class MaskMode(CssProperty): ...
class MaskOrigin(CssProperty): ...
class MaskPosition(CssProperty): ...
class MaskRepeat(CssProperty): ...
class MaskSize(CssProperty): ...
class MaskType(CssProperty): ...
class MaxHeight(CssProperty): ...
class MaxWidth(CssProperty): ...
class MaxBlockSize(CssProperty): ...
class MaxInlineSize(CssProperty): ...
class MinBlockSize(CssProperty): ...
class MinInlineSize(CssProperty): ...
class MinHeight(CssProperty): ...
class MinWidth(CssProperty): ...
class MixBlendMode(CssProperty): ...
class ObjectFit(CssProperty): ...
class ObjectPosition(CssProperty): ...
class Offset(CssProperty): ...
class OffsetAnchor(CssProperty): ...
class OffsetDistance(CssProperty): ...
class OffsetPath(CssProperty): ...
class OffsetRotate(CssProperty): ...
class Opacity(CssProperty): ...
class Order(CssProperty): ...
class Orphans(CssProperty): ...
class Outline(CssProperty): ...
class OutlineColor(CssProperty): ...
class OutlineOffset(CssProperty): ...
class OutlineStyle(CssProperty): ...
class OutlineWidth(CssProperty): ...
class Overflow(CssProperty): ...
class OverflowAnchor(CssProperty): ...
class OverflowWrap(CssProperty): ...
class OverflowX(CssProperty): ...
class OverflowY(CssProperty): ...
class OverscrollBehavior(CssProperty): ...
class OverscrollBehaviorBlock(CssProperty): ...
class OverscrollBehaviorInline(CssProperty): ...
class OverscrollBehaviorX(CssProperty): ...
class OverscrollBehaviorY(CssProperty): ...
class Padding(CssProperty): ...
class PaddingBlock(CssProperty): ...
class PaddingBlockEnd(CssProperty): ...
class PaddingBlockStart(CssProperty): ...
class PaddingBottom(CssProperty): ...
class PaddingInline(CssProperty): ...
class PaddingInlineEnd(CssProperty): ...
class PaddingInlineStart(CssProperty): ...
class PaddingLeft(CssProperty): ...
class PaddingRight(CssProperty): ...
class PaddingTop(CssProperty): ...
class PageBreakAfter(CssProperty): ...
class PageBreakBefore(CssProperty): ...
class PageBreakInside(CssProperty): ...
class PaintOrder(CssProperty): ...
class Perspective(CssProperty): ...
class PerspectiveOrigin(CssProperty): ...
class PlaceContent(CssProperty): ...
class PlaceItems(CssProperty): ...
class PlaceSelf(CssProperty): ...
class PointerEvents(CssProperty): ...
class Position(CssProperty): ...
class Quotes(CssProperty): ...
class Resize(CssProperty): ...
class Right(CssProperty): ...
class Rotate(CssProperty): ...
class RowGap(CssProperty): ...
class Scale(CssProperty): ...
class ScrollBehavior(CssProperty): ...
class ScrollMargin(CssProperty): ...
class ScrollMarginBlock(CssProperty): ...
class ScrollMarginBlockEnd(CssProperty): ...
class ScrollMarginBlockStart(CssProperty): ...
class ScrollMarginBottom(CssProperty): ...
class ScrollMarginInline(CssProperty): ...
class ScrollMarginInlineEnd(CssProperty): ...
class ScrollMarginInlineStart(CssProperty): ...
class ScrollMarginLeft(CssProperty): ...
class ScrollMarginRight(CssProperty): ...
class ScrollMarginTop(CssProperty): ...
class ScrollPadding(CssProperty): ...
class ScrollPaddingBlock(CssProperty): ...
class ScrollPaddingBlockEnd(CssProperty): ...
class ScrollPaddingBlockStart(CssProperty): ...
class ScrollPaddingBottom(CssProperty): ...
class ScrollPaddingInline(CssProperty): ...
class ScrollPaddingInlineEnd(CssProperty): ...
class ScrollPaddingInlineStart(CssProperty): ...
class ScrollPaddingLeft(CssProperty): ...
class ScrollPaddingRight(CssProperty): ...
class ScrollPaddingTop(CssProperty): ...
class ScrollSnapAlign(CssProperty): ...
class ScrollSnapStop(CssProperty): ...
class ScrollSnapType(CssProperty): ...
class ScrollbarColor(CssProperty): ...
class TabSize(CssProperty): ...
class TableLayout(CssProperty): ...
class TextAlign(CssProperty): ...
class TextAlignLast(CssProperty): ...
class TextCombineUpright(CssProperty): ...
class TextDecoration(CssProperty): ...
class TextDecorationColor(CssProperty): ...
class TextDecorationLine(CssProperty): ...
class TextDecorationStyle(CssProperty): ...
class TextDecorationThickness(CssProperty): ...
class TextEmphasis(CssProperty): ...
class TextEmphasisColor(CssProperty): ...
class TextEmphasisPosition(CssProperty): ...
class TextEmphasisStyle(CssProperty): ...
class TextIndent(CssProperty): ...
class TextJustify(CssProperty): ...
class TextOrientation(CssProperty): ...
class TextOverflow(CssProperty): ...
class TextShadow(CssProperty): ...
class TextTransform(CssProperty): ...
class TextUnderlineOffset(CssProperty): ...
class TextUnderlinePosition(CssProperty): ...
class Top(CssProperty): ...
class Transform(CssProperty): ...
class TransformOrigin(CssProperty): ...
class TransformStyle(CssProperty): ...
class Transition(CssProperty): ...
class TransitionDelay(CssProperty): ...
class TransitionDuration(CssProperty): ...
class TransitionProperty(CssProperty): ...
class TransitionTimingFunction(CssProperty): ...
class Translate(CssProperty): ...
class UnicodeBidi(CssProperty): ...
class UserSelect(CssProperty): ...
class VerticalAlign(CssProperty): ...
class Visibility(CssProperty): ...
class WhiteSpace(CssProperty): ...
class Widows(CssProperty): ...
class Width(CssProperty): ...
class WordBreak(CssProperty): ...
class WordSpacing(CssProperty): ...
class WordWrap(CssProperty): ...
class WritingMode(CssProperty): ...
class ZIndex(CssProperty): ...

def _subclasses(cls : type):
	return cls.__subclasses__()
PROPERTIES : "NameSpace[str,type[CssProperty]]" = NameSpace(map(lambda prop: (prop.__name__, prop), CssProperty.__subclasses__()))
UNITS = tuple(Walker(Unit.__subclasses__(), key=_subclasses))
